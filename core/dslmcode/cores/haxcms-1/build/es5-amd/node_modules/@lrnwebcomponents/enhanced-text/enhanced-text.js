define(["exports", "require", "../../lit/index.js", "../micro-frontend-registry/micro-frontend-registry.js", "../micro-frontend-registry/lib/microServices.js"], function (_exports, _require, _index, _microFrontendRegistry, _microServices) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EnhancedText = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_425ca2d01da511ed9d313b9780b2ae17, _templateObject2_425ca2d01da511ed9d313b9780b2ae17;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // enable services for glossary enhancement
  (0, _microServices.enableServices)(['haxcms']);

  _microFrontendRegistry.MicroFrontendRegistry.add({
    endpoint: "/api/services/text/textVide",
    name: "@enhancedText/textVide",
    title: "text-vide",
    description: "Enhance readability of text based on brain science",
    params: {
      body: "Block of text to enhance"
    }
  });
  /**
   * `enhanced-text`
   * `take text and process it with various enhancements`
   * @demo demo/index.html
   * @element enhanced-text
   */


  var EnhancedText = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EnhancedText, _LitElement);

    var _super = _createSuper(EnhancedText);

    /**
     * HTMLElement
     */
    function EnhancedText() {
      var _this;

      babelHelpers.classCallCheck(this, EnhancedText);
      _this = _super.call(this);
      _this.loading = false;
      _this.auto = false;
      _this.fixationPoint = 4;
      _this.vide = false;
      _this.wikipedia = false;
      _this.haxcmsGlossary = false;
      _this.haxcmsSiteLocation = '';
      _this.haxcmsSite = null;
      _this.haxcmsMarkAll = false;
      return _this;
    }

    babelHelpers.createClass(EnhancedText, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText.prototype), "firstUpdated", this).call(this, changedProperties);
        } // automatic enhancement if set, otherwise manual


        if (this.auto) {
          this.enhance();
        }
      } // apply terms from whatever came back

    }, {
      key: "applyTermFromList",
      value: function applyTermFromList(data) {
        var _this2 = this;

        if (data.status && data.data && data.data.length) {
          new Promise(function (res, rej) {
            return _require.default(["../vocab-term/vocab-term.js"], res, rej);
          }); // loop through and apply terms that were found w/ the vocab-term element
          // get all text nodes internally

          var textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
          .filter(function (child) {
            return child.nodeType === 3;
          }) // get only text nodes
          .filter(function (child) {
            return child.textContent.trim();
          }); // eliminate empty text
          // no text nodes, look for html

          if (textNodes.length === 0) {
            var content = this.innerText;
            this.innerHTML = '';
            content.split(/\s|\.+/).forEach(function (item) {
              var tn = document.createTextNode(item);

              _this2.appendChild(tn);

              _this2.appendChild(document.createTextNode(' '));
            });
            textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
            .filter(function (child) {
              return child.nodeType === 3;
            }) // get only text nodes
            .filter(function (child) {
              return child.textContent.trim();
            }); // eliminate empty text
          } // if we only have 1, leverage it


          if (textNodes.length === 1) {
            var _content = textNodes[0].textContent;
            textNodes[0].remove();

            _content.split(/\s|\.+/).forEach(function (item) {
              var tn = document.createTextNode(item);

              _this2.appendChild(tn);

              _this2.appendChild(document.createTextNode(' '));
            });

            textNodes = babelHelpers.toConsumableArray(this.childNodes) // has childNodes inside, including text ones
            .filter(function (child) {
              return child.nodeType === 3;
            }) // get only text nodes
            .filter(function (child) {
              return child.textContent.trim();
            }); // eliminate empty text
          } // loop through data and apply vocab-term wrapper


          for (var i = 0; i < data.data.length; i++) {
            var term = data.data[i];
            var found = false; // find textnodes that match the term and apply

            for (var j = 0; j < textNodes.length; j++) {
              var el = textNodes[j];

              if (el.textContent.toLowerCase() == term.term.toLowerCase() && (!found || this.haxcmsMarkAll)) {
                // find term in contents of page
                // replace in context
                var termEl = document.createElement('vocab-term');
                termEl.term = el.textContent;
                termEl.information = term.definition; // support for links from endpoint

                if (term.links && term.links.length > 0) {
                  var div = document.createElement('div');
                  div.classList.add('links');

                  for (var t = 0; t < term.links.length; t++) {
                    var a = document.createElement('a');
                    a.href = term.links[t].href;
                    a.innerText = term.links[t].title;
                    div.appendChild(a);
                  }

                  termEl.appendChild(div);
                }

                el.parentNode.insertBefore(termEl, el);
                termEl.appendChild(el);
                found = true;
              }
            }
          }
        }
      } // apply enhancement to text. if not in auto user must invoke this.

    }, {
      key: "enhance",
      value: function () {
        var _enhance = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var body;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  body = this.innerHTML;
                  this.loading = true;

                  if (!this.vide) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return _microFrontendRegistry.MicroFrontendRegistry.call('@enhancedText/textVide', {
                    body: body,
                    fixationPoint: this.fixationPoint
                  }, this.enahncedTextResponse.bind(this));

                case 5:
                  if (!(this.haxcmsGlossary && (this.haxcmsSiteLocation || this.haxcmsSite))) {
                    _context.next = 13;
                    break;
                  }

                  if (!this.haxcmsSite) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 9;
                  return _microFrontendRegistry.MicroFrontendRegistry.call('@haxcms/termsInPage', {
                    body: body,
                    type: 'site',
                    site: this.haxcmsSite,
                    wikipedia: this.wikipedia
                  }, this.applyTermFromList.bind(this));

                case 9:
                  _context.next = 13;
                  break;

                case 11:
                  _context.next = 13;
                  return _microFrontendRegistry.MicroFrontendRegistry.call('@haxcms/termsInPage', {
                    body: body,
                    type: 'link',
                    site: this.haxcmsSiteLocation,
                    wikipedia: this.wikipedia
                  }, this.applyTermFromList.bind(this));

                case 13:
                  // all above will run in order
                  this.loading = false;

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function enhance() {
          return _enhance.apply(this, arguments);
        }

        return enhance;
      }()
    }, {
      key: "enahncedTextResponse",
      value: function enahncedTextResponse(data) {
        if (data.status && data.data && data.data.length) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(data.data, 'text/html');
          this.innerHTML = doc.body.innerHTML;
        }
      }
      /**
       * LitElement style callback
       */

    }, {
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_425ca2d01da511ed9d313b9780b2ae17 || (_templateObject_425ca2d01da511ed9d313b9780b2ae17 = babelHelpers.taggedTemplateLiteral(["\n       <div class=\"loading\"></div>\n       <slot></slot>\n     "])));
      }
      /**
       * Convention we use
       */

    }], [{
      key: "properties",
      get: function get() {
        return {
          wikipedia: {
            type: Boolean,
            reflect: true
          },
          vide: {
            type: Boolean,
            reflect: true
          },
          fixationPoint: {
            type: Number,
            attribute: 'fixation-point'
          },
          haxcmsGlossary: {
            type: Boolean,
            attribute: 'haxcms-glossary'
          },
          haxcmsSiteLocation: {
            type: String,
            attribute: 'haxcms-site-location'
          },
          haxcmsSite: {
            type: Object,
            attribute: 'haxcms-site'
          },
          haxcmsMarkAll: {
            type: Boolean,
            attribute: 'haxcms-mark-all'
          },
          loading: {
            type: Boolean,
            reflect: true
          },
          auto: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(EnhancedText), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_425ca2d01da511ed9d313b9780b2ae17 || (_templateObject2_425ca2d01da511ed9d313b9780b2ae17 = babelHelpers.taggedTemplateLiteral(["\n         :host {\n           display: block;\n         }\n         div::slotted(bold) {\n           font-weight: 800;\n         }\n         :host([loading]) .loading {\n           margin: 8px 0 0 -12px;\n           font-size: 2px;\n           width: 4px;\n           height: 4px;\n           border-radius: 50%;\n           position: absolute;\n           -webkit-animation: load5 1.1s infinite ease;\n           animation: load5 1.1s infinite ease;\n           -webkit-transform: translateZ(0);\n           -ms-transform: translateZ(0);\n           transform: translateZ(0);\n         }\n         @-webkit-keyframes load5 {\n           0%,\n           100% {\n             box-shadow: 0em -2.6em 0em 0em var(--enhanced-text-color, #000000), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.5), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7);\n           }\n           12.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.7), 1.8em -1.8em 0 0em var(--enhanced-text-color, #000000), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5);\n           }\n           25% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.5), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7), 2.5em 0em 0 0em var(--enhanced-text-color, #000000), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           37.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5), 2.5em 0em 0 0em rgba(255, 255, 255, 0.7), 1.75em 1.75em 0 0em var(--enhanced-text-color, #000000), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           50% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.5), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.7), 0em 2.5em 0 0em var(--enhanced-text-color, #000000), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           62.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.5), 0em 2.5em 0 0em rgba(255, 255, 255, 0.7), -1.8em 1.8em 0 0em var(--enhanced-text-color, #000000), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           75% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.5), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.7), -2.6em 0em 0 0em var(--enhanced-text-color, #000000), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           87.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.5), -2.6em 0em 0 0em rgba(255, 255, 255, 0.7), -1.8em -1.8em 0 0em var(--enhanced-text-color, #000000);\n           }\n         }\n         @keyframes load5 {\n           0%,\n           100% {\n             box-shadow: 0em -2.6em 0em 0em var(--enhanced-text-color, #000000), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.5), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7);\n           }\n           12.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.7), 1.8em -1.8em 0 0em var(--enhanced-text-color, #000000), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5);\n           }\n           25% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.5), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7), 2.5em 0em 0 0em var(--enhanced-text-color, #000000), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           37.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5), 2.5em 0em 0 0em rgba(255, 255, 255, 0.7), 1.75em 1.75em 0 0em var(--enhanced-text-color, #000000), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           50% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.5), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.7), 0em 2.5em 0 0em var(--enhanced-text-color, #000000), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           62.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.5), 0em 2.5em 0 0em rgba(255, 255, 255, 0.7), -1.8em 1.8em 0 0em var(--enhanced-text-color, #000000), -2.6em 0em 0 0em rgba(255, 255, 255, 0.2), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           75% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.5), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.7), -2.6em 0em 0 0em var(--enhanced-text-color, #000000), -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);\n           }\n           87.5% {\n             box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2), 1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2), 2.5em 0em 0 0em rgba(255, 255, 255, 0.2), 1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2), 0em 2.5em 0 0em rgba(255, 255, 255, 0.2), -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.5), -2.6em 0em 0 0em rgba(255, 255, 255, 0.7), -1.8em -1.8em 0 0em var(--enhanced-text-color, #000000);\n           }\n         }\n \n       "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "enhanced-text";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          gizmo: {
            title: "Enhanced text",
            description: "Add content look up to a blob of text"
          },
          setttings: {
            configure: [{
              slot: "",
              title: "Text to process",
              description: "Text that will be enhanced"
            }, {
              property: "wikipedia",
              type: "boolean",
              title: "Wikipedia articles",
              description: "Enhance found definitions in glossary with possibly related wikipedia article links"
            }, {
              property: "haxcmsGlossary",
              type: "boolean",
              title: "haxcms: Glossary",
              description: "Automatically link to definitions found on the /glossary page of a haxcms site"
            }, {
              property: "haxcmsSiteLocation",
              type: "textfield",
              title: "haxcms: site url",
              description: "Link to the HAXcms site to leverage for glossary of terms"
            }, {
              property: "haxcmsSite",
              type: "textarea",
              title: "haxcms: site",
              description: "JSON blob of the site.json file itself"
            }]
          }
        };
      }
    }]);
    return EnhancedText;
  }(_index.LitElement);

  _exports.EnhancedText = EnhancedText;
  customElements.define(EnhancedText.tag, EnhancedText);
});