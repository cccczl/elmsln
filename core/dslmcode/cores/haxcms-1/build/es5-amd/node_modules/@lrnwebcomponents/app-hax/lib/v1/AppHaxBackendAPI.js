define(["exports", "../../../../lit/index.js", "../../../utils/utils.js", "../../../jwt-login/jwt-login.js", "../../../../mobx/dist/mobx.esm.js", "./AppHaxStore.js"], function (_exports, _index, _utils, _jwtLogin, _mobxEsm, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxBackendAPI = _exports.AppHaxAPI = void 0;

  var _templateObject_82a42e00ca8d11ecb732f7d935a5ce07;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // this element will manage all connectivity to the backend
  // this way everything is forced to request through calls to this
  // so that it doesn't get messy down below in state
  var AppHaxBackendAPI = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxBackendAPI, _LitElement);

    var _super = _createSuper(AppHaxBackendAPI);

    function AppHaxBackendAPI() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxBackendAPI);
      _this = _super.call(this);
      _this.jwt = (0, _utils.localStorageGet)("jwt", null);
      _this.method = window.appSettings.demo ? "GET" : "POST";
      _this.basePath = "/";
      _this.lastResponse = {};
      _this.appSettings = {};
      (0, _mobxEsm.autorun)(function () {
        _this.appSettings = (0, _mobxEsm.toJS)(_AppHaxStore.store.appSettings); // allow setting in session driven environments

        if (_this.appSettings.method) {
          _this.method = _this.appSettings.method;
        }

        if (_this.appSettings.jwt) {
          _this.jwt = _this.appSettings.jwt;
        }
      });
      (0, _mobxEsm.autorun)(function () {
        _this.token = (0, _mobxEsm.toJS)(_AppHaxStore.store.token);
      });
      return _this;
    }

    babelHelpers.createClass(AppHaxBackendAPI, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_82a42e00ca8d11ecb732f7d935a5ce07 || (_templateObject_82a42e00ca8d11ecb732f7d935a5ce07 = babelHelpers.taggedTemplateLiteral(["<jwt-login\n      jwt=\"", "\"\n      url=\"", "\"\n      method=\"", "\"\n      refresh-url=\"", "\"\n      redirect-url=\"", "\"\n      logout-url=\"", "\"\n      id=\"jwt\"\n      @jwt-changed=\"", "\"\n    ></jwt-login>"])), this.jwt, this.appSettings.login, this.method, this.appSettings.refreshUrl, this.appSettings.redirectUrl, this.appSettings.logout, this.jwtChanged);
      } // event meaning we either got or removed the jwt

    }, {
      key: "jwtChanged",
      value: function jwtChanged(e) {
        this.jwt = e.detail.value;
      }
    }, {
      key: "makeCall",
      value: function () {
        var _makeCall = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(call) {
          var _this2 = this;

          var data,
              save,
              callback,
              urlRequest,
              options,
              response,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  save = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
                  callback = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;

                  if (!(this.appSettings && this.appSettings[call])) {
                    _context.next = 15;
                    break;
                  }

                  urlRequest = "".concat(this.basePath).concat(this.appSettings[call]);
                  options = {
                    method: this.method
                  };

                  if (this.jwt) {
                    data.jwt = this.jwt;
                  }

                  if (this.token) {
                    data.token = this.token;
                  } // encode in search params or body of the request


                  if (this.method === "GET") {
                    urlRequest += "?" + new URLSearchParams(data).toString();
                  } else {
                    options.body = JSON.stringify(data);
                  }

                  _context.next = 11;
                  return fetch("".concat(urlRequest), options).then(function (response) {
                    if (response.ok) {
                      return response.json();
                    } else if (response.status === 401) {
                      // call not allowed, log out bc unauthorized
                      window.dispatchEvent(new CustomEvent("jwt-login-logout", {
                        composed: true,
                        bubbles: true,
                        cancelable: false,
                        detail: {
                          redirect: true
                        }
                      }));
                    } else if (response.status === 403) {
                      // if this was a 403 it should be because of a bad jwt
                      // or out of date one. let's kick off a call to get a new one
                      // hopefully from the timing token, knowing this ALSO could kick
                      // over here.
                      window.dispatchEvent(new CustomEvent("jwt-login-refresh-token", {
                        composed: true,
                        bubbles: true,
                        cancelable: false,
                        detail: {
                          element: {
                            obj: _this2,
                            callback: "makeCall",
                            params: [call, data, save, callback]
                          }
                        }
                      }));
                    }

                    return {};
                  });

                case 11:
                  response = _context.sent;

                  // ability to save the output if this is being done as a bg task
                  // that way we can get access to the result later on
                  if (save) {
                    this.lastResponse[call] = response;
                  }

                  if (callback) {
                    callback();
                  }

                  return _context.abrupt("return", response);

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function makeCall(_x) {
          return _makeCall.apply(this, arguments);
        }

        return makeCall;
      }() // set instance of API in store

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this).call(this, changedProperties);
        } // set store refernece to this singleton


        _AppHaxStore.store.AppHaxAPI = this; // site creation roped into the promise list
        // after knowing our data structure since we'll definitely call this

        _AppHaxStore.store.newSitePromiseList = [].concat(babelHelpers.toConsumableArray(_AppHaxStore.store.newSitePromiseList), [/*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this3.makeCall("createSite", _this3._formatSitePostData(), true);

                case 2:
                  return _context2.abrupt("return", _context2.sent);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))]);
      } // just easier to read here

    }, {
      key: "_formatSitePostData",
      value: function _formatSitePostData() {
        var site = (0, _mobxEsm.toJS)(_AppHaxStore.store.site);
        return {
          site: {
            name: site.name,
            description: "".concat(site.type, " ").concat(site.structure),
            theme: site.theme
          },
          theme: {
            color: "blue",
            icon: "icons:link"
          }
        };
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "jwt") {
            _AppHaxStore.store.jwt = _this4[propName];
          }

          if (propName === "token") {
            _AppHaxStore.store.token = _this4[propName];
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "app-hax-backend-api";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          jwt: {
            type: String
          },
          basePath: {
            type: String,
            attribute: "base-path"
          },
          appSettings: {
            type: Object
          },
          method: {
            type: String
          },
          token: {
            type: String
          }
        };
      }
    }]);
    return AppHaxBackendAPI;
  }(_index.LitElement);

  _exports.AppHaxBackendAPI = AppHaxBackendAPI;
  window.AppHaxAPI = window.AppHaxAPI || {};

  window.AppHaxAPI.requestAvailability = function () {
    if (!window.AppHaxAPI.instance) {
      window.AppHaxAPI.instance = document.createElement(AppHaxBackendAPI.tag);
      document.body.appendChild(window.AppHaxAPI.instance);
    }

    return window.AppHaxAPI.instance;
  };

  var AppHaxAPI = window.AppHaxAPI.requestAvailability();
  _exports.AppHaxAPI = AppHaxAPI;
  customElements.define(AppHaxBackendAPI.tag, AppHaxBackendAPI);
});