define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MicroFrontendRegistry = _exports.MicroFrontend = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2022 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  // very basic class for micro
  var MicroFrontendKeys = ["endpoint", "name", "title", "description", "params", "callback"]; // new micro

  var MicroFrontend = /*#__PURE__*/babelHelpers.createClass(function MicroFrontend() {
    var _this = this;

    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    babelHelpers.classCallCheck(this, MicroFrontend);
    // set defaults for each key expected
    MicroFrontendKeys.map(function (key) {
      return key === "params" ? _this[key] = values[key] || {} : _this[key] = values[key] || null;
    });
  });
  /**
   * `micro-frontend-registry`
   * `A singleton for registration and managing access to leverage microservices for web components`
   *
   * @demo demo/index.html
   * @element micro-frontend-registry
   */

  _exports.MicroFrontend = MicroFrontend;

  var MicroFrontendRegistryEl = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(MicroFrontendRegistryEl, _HTMLElement);

    var _super = _createSuper(MicroFrontendRegistryEl);

    function MicroFrontendRegistryEl() {
      var _this2;

      babelHelpers.classCallCheck(this, MicroFrontendRegistryEl);
      _this2 = _super.call(this);
      _this2.list = [];
      _this2.MicroFrontend = MicroFrontend;
      return _this2;
    }
    /**
     * Adding more or less alias for define
     * @param {Object} params 
     */


    babelHelpers.createClass(MicroFrontendRegistryEl, [{
      key: "add",
      value: function add(params) {
        this.define(new MicroFrontend(params));
      }
      /**
       * define a new micro frontend
       *
       * @param {MicroFrontend} item - instanceof MicroFrontend
       * @returns {Boolean} status of definition being accepted
       */

    }, {
      key: "define",
      value: function define(item) {
        if (!babelHelpers.instanceof(item, MicroFrontend)) {
          console.warn("MicroFrontendRegistry: use class MicroFrontend instance but if keys match it will register still.");
          console.warn(item);
        } // validate item has all keys we care about


        if (Object.keys(item).every(function (key) {
          return MicroFrontendKeys.includes(key);
        })) {
          // support for local resolution of vercel vs serve for things that are
          // built off of the main registry on localhost
          if (item.endpoint.startsWith("/api/")) {
            var base = ''; // support base rewrite

            if (window.MicroFrontendRegistryConfig.base) {
              base = window.MicroFrontendRegistryConfig.base;
            } // keep local based if we're local, otherwise we need to leverage deployed address
            else if (window.location.origin.startsWith('http://localhost')) {
                base = window.location.origin.replace(/localhost:8(.*)/, "localhost:3000");
              } // most common case, hit vercel address
              else {
                  base = 'https://haxapi.vercel.app';
                }

            item.endpoint = "".concat(base).concat(item.endpoint);
          } // check for registry config object


          if (window.MicroFrontendRegistryConfig[item.name]) {
            Object.keys(window.MicroFrontendRegistryConfig[item.name]).map(function (key) {
              item[key] = window.MicroFrontendRegistryConfig[item.name][key];
            });
          }

          if (!this.has(item.name)) {
            this.list.push(item);
            return true;
          }
        } else {
          return false;
        }
      }
      /**
       * get the definition for a machine named micro
       *
       * @param {String} name - machine name of the micro record requested
       * @returns {MicroFrontend} the micro in question
       */

    }, {
      key: "get",
      value: function get(name) {
        var testOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (name && this.list.length > 0) {
          var found = this.list.find(function (item) {
            return item.name === name;
          });

          if (found) {
            return found;
          }
        }

        if (!testOnly) {
          console.error("call for ".concat(name, " but not found in micro-frontend-registry"));
        }

        return null;
      }
      /**
       * boolean for having the definition for a machine named micro
       *
       * @param {String} name - machine name of the micro record requested
       * @returns {Boolean} if we have this micro
       */

    }, {
      key: "has",
      value: function has(name) {
        return this.get(name, true) !== null;
      }
      /**
       * set the definition for a machine named micro that was already registered
       *
       * @param {String} name - machine name of the micro record requested
       * @param {MicroFrontend} item - updated micro data
       * @returns {MicroFrontend} the micro in question
       */

    }, {
      key: "set",
      value: function set(name) {
        var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (name && this.list.length > 0 && this.has(name)) {
          var index = this.list.findIndex(function (item) {
            return item.name === name;
          });
          this.list[index] = item;
        }

        return null;
      }
      /**
       * generate the call to the micro based on accepting name and params
       *
       * @param {String} name - machine name for the micro to call
       * @param {Object} params - data to send to endpoint
       * @param {Object} caller - reference to DOM node that called this
       * @returns {Object} Response object from microservice, otherwise `null`
       */

    }, {
      key: "call",
      value: function () {
        var _call = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
          var params,
              callback,
              caller,
              item,
              data,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  params = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  callback = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                  caller = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;

                  if (!this.has(name)) {
                    _context.next = 15;
                    break;
                  }

                  item = this.get(name); // support for formdata which is already encoded

                  _context.next = 7;
                  return fetch(item.endpoint, {
                    method: "POST",
                    body: babelHelpers.instanceof(params, FormData) ? params : JSON.stringify(params)
                  }).then(function (d) {
                    return d.ok ? d.json() : {
                      status: d.status,
                      data: null
                    };
                  }).catch(function (e, d) {
                    // this is endpoint completely failed to respond
                    return {
                      status: 500,
                      data: null
                    };
                  });

                case 7:
                  data = _context.sent;

                  if (!item.callback) {
                    _context.next = 11;
                    break;
                  }

                  _context.next = 11;
                  return item.callback(data, caller);

                case 11:
                  if (!callback) {
                    _context.next = 14;
                    break;
                  }

                  _context.next = 14;
                  return callback(data, caller);

                case 14:
                  return _context.abrupt("return", data);

                case 15:
                  return _context.abrupt("return", null);

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function call(_x) {
          return _call.apply(this, arguments);
        }

        return call;
      }()
      /**
       * generate the call to the micro as a URL
       *
       * @param {String} name - machine name for the micro to call
       * @param {Object} params - data to send to endpoint
       * @returns {String} URL with parameters for a GET
       */

    }, {
      key: "url",
      value: function url(name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.has(name)) {
          var item = this.get(name); // no null submissions

          for (var key in params) {
            if (params.hasOwnProperty(key)) {
              if (params[key] == null) delete params[key];
            }
          }

          return new URL(item.endpoint).toString() + "?".concat(new URLSearchParams(params).toString());
        }

        return '';
      }
    }], [{
      key: "tag",
      get: function get() {
        return "micro-frontend-registry";
      }
    }]);
    return MicroFrontendRegistryEl;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  customElements.define(MicroFrontendRegistryEl.tag, MicroFrontendRegistryEl); // register globally so we can make sure there is only one

  window.MicroFrontendRegistry = window.MicroFrontendRegistry || {};
  window.MicroFrontendRegistryConfig = window.MicroFrontendRegistryConfig || {};

  window.MicroFrontendRegistry.requestAvailability = function () {
    if (!window.MicroFrontendRegistry.instance) {
      window.MicroFrontendRegistry.instance = document.createElement(MicroFrontendRegistryEl.tag);
      document.body.appendChild(window.MicroFrontendRegistry.instance);
    }

    return window.MicroFrontendRegistry.instance;
  }; // most common way to access registry


  var MicroFrontendRegistry = window.MicroFrontendRegistry.requestAvailability();
  _exports.MicroFrontendRegistry = MicroFrontendRegistry;
});