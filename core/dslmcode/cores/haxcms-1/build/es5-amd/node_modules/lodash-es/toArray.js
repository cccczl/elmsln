define(["exports", "./_Symbol.js", "./_copyArray.js", "./_getTag.js", "./isArrayLike.js", "./isString.js", "./_iteratorToArray.js", "./_mapToArray.js", "./_setToArray.js", "./_stringToArray.js", "./values.js"], function (_exports, _Symbol2, _copyArray, _getTag, _isArrayLike, _isString, _iteratorToArray, _mapToArray, _setToArray, _stringToArray, _values) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _Symbol2 = babelHelpers.interopRequireDefault(_Symbol2);
  _copyArray = babelHelpers.interopRequireDefault(_copyArray);
  _getTag = babelHelpers.interopRequireDefault(_getTag);
  _isArrayLike = babelHelpers.interopRequireDefault(_isArrayLike);
  _isString = babelHelpers.interopRequireDefault(_isString);
  _iteratorToArray = babelHelpers.interopRequireDefault(_iteratorToArray);
  _mapToArray = babelHelpers.interopRequireDefault(_mapToArray);
  _setToArray = babelHelpers.interopRequireDefault(_setToArray);
  _stringToArray = babelHelpers.interopRequireDefault(_stringToArray);
  _values = babelHelpers.interopRequireDefault(_values);

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
      setTag = '[object Set]';
  /** Built-in value references. */

  var symIterator = _Symbol2.default ? _Symbol2.default.iterator : undefined;
  /**
   * Converts `value` to an array.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */

  function toArray(value) {
    if (!value) {
      return [];
    }

    if ((0, _isArrayLike.default)(value)) {
      return (0, _isString.default)(value) ? (0, _stringToArray.default)(value) : (0, _copyArray.default)(value);
    }

    if (symIterator && value[symIterator]) {
      return (0, _iteratorToArray.default)(value[symIterator]());
    }

    var tag = (0, _getTag.default)(value),
        func = tag == mapTag ? _mapToArray.default : tag == setTag ? _setToArray.default : _values.default;
    return func(value);
  }

  var _default = toArray;
  _exports.default = _default;
});