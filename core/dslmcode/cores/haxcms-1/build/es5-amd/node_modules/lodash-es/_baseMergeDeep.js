define(["exports", "./_assignMergeValue.js", "./_cloneBuffer.js", "./_cloneTypedArray.js", "./_copyArray.js", "./_initCloneObject.js", "./isArguments.js", "./isArray.js", "./isArrayLikeObject.js", "./isBuffer.js", "./isFunction.js", "./isObject.js", "./isPlainObject.js", "./isTypedArray.js", "./_safeGet.js", "./toPlainObject.js"], function (_exports, _assignMergeValue, _cloneBuffer, _cloneTypedArray, _copyArray, _initCloneObject, _isArguments, _isArray, _isArrayLikeObject, _isBuffer, _isFunction, _isObject, _isPlainObject, _isTypedArray, _safeGet, _toPlainObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _assignMergeValue = babelHelpers.interopRequireDefault(_assignMergeValue);
  _cloneBuffer = babelHelpers.interopRequireDefault(_cloneBuffer);
  _cloneTypedArray = babelHelpers.interopRequireDefault(_cloneTypedArray);
  _copyArray = babelHelpers.interopRequireDefault(_copyArray);
  _initCloneObject = babelHelpers.interopRequireDefault(_initCloneObject);
  _isArguments = babelHelpers.interopRequireDefault(_isArguments);
  _isArray = babelHelpers.interopRequireDefault(_isArray);
  _isArrayLikeObject = babelHelpers.interopRequireDefault(_isArrayLikeObject);
  _isBuffer = babelHelpers.interopRequireDefault(_isBuffer);
  _isFunction = babelHelpers.interopRequireDefault(_isFunction);
  _isObject = babelHelpers.interopRequireDefault(_isObject);
  _isPlainObject = babelHelpers.interopRequireDefault(_isPlainObject);
  _isTypedArray = babelHelpers.interopRequireDefault(_isTypedArray);
  _safeGet = babelHelpers.interopRequireDefault(_safeGet);
  _toPlainObject = babelHelpers.interopRequireDefault(_toPlainObject);

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = (0, _safeGet.default)(object, key),
        srcValue = (0, _safeGet.default)(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      (0, _assignMergeValue.default)(object, key, stacked);
      return;
    }

    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = (0, _isArray.default)(srcValue),
          isBuff = !isArr && (0, _isBuffer.default)(srcValue),
          isTyped = !isArr && !isBuff && (0, _isTypedArray.default)(srcValue);
      newValue = srcValue;

      if (isArr || isBuff || isTyped) {
        if ((0, _isArray.default)(objValue)) {
          newValue = objValue;
        } else if ((0, _isArrayLikeObject.default)(objValue)) {
          newValue = (0, _copyArray.default)(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = (0, _cloneBuffer.default)(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = (0, _cloneTypedArray.default)(srcValue, true);
        } else {
          newValue = [];
        }
      } else if ((0, _isPlainObject.default)(srcValue) || (0, _isArguments.default)(srcValue)) {
        newValue = objValue;

        if ((0, _isArguments.default)(objValue)) {
          newValue = (0, _toPlainObject.default)(objValue);
        } else if (!(0, _isObject.default)(objValue) || (0, _isFunction.default)(objValue)) {
          newValue = (0, _initCloneObject.default)(srcValue);
        }
      } else {
        isCommon = false;
      }
    }

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }

    (0, _assignMergeValue.default)(object, key, newValue);
  }

  var _default = baseMergeDeep;
  _exports.default = _default;
});