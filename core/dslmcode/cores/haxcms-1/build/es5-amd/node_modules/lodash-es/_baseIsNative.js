define(["exports", "./isFunction.js", "./_isMasked.js", "./isObject.js", "./_toSource.js"], function (_exports, _isFunction, _isMasked, _isObject, _toSource) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _isFunction = babelHelpers.interopRequireDefault(_isFunction);
  _isMasked = babelHelpers.interopRequireDefault(_isMasked);
  _isObject = babelHelpers.interopRequireDefault(_isObject);
  _toSource = babelHelpers.interopRequireDefault(_toSource);

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative(value) {
    if (!(0, _isObject.default)(value) || (0, _isMasked.default)(value)) {
      return false;
    }

    var pattern = (0, _isFunction.default)(value) ? reIsNative : reIsHostCtor;
    return pattern.test((0, _toSource.default)(value));
  }

  var _default = baseIsNative;
  _exports.default = _default;
});