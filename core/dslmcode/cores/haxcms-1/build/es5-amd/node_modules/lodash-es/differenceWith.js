define(["exports", "./_baseDifference.js", "./_baseFlatten.js", "./_baseRest.js", "./isArrayLikeObject.js", "./last.js"], function (_exports, _baseDifference, _baseFlatten, _baseRest, _isArrayLikeObject, _last) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _baseDifference = babelHelpers.interopRequireDefault(_baseDifference);
  _baseFlatten = babelHelpers.interopRequireDefault(_baseFlatten);
  _baseRest = babelHelpers.interopRequireDefault(_baseRest);
  _isArrayLikeObject = babelHelpers.interopRequireDefault(_isArrayLikeObject);
  _last = babelHelpers.interopRequireDefault(_last);

  /**
   * This method is like `_.difference` except that it accepts `comparator`
   * which is invoked to compare elements of `array` to `values`. The order and
   * references of result values are determined by the first array. The comparator
   * is invoked with two arguments: (arrVal, othVal).
   *
   * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   *
   * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
   * // => [{ 'x': 2, 'y': 1 }]
   */
  var differenceWith = (0, _baseRest.default)(function (array, values) {
    var comparator = (0, _last.default)(values);

    if ((0, _isArrayLikeObject.default)(comparator)) {
      comparator = undefined;
    }

    return (0, _isArrayLikeObject.default)(array) ? (0, _baseDifference.default)(array, (0, _baseFlatten.default)(values, 1, _isArrayLikeObject.default, true), undefined, comparator) : [];
  });
  var _default = differenceWith;
  _exports.default = _default;
});